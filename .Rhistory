ingredients<<-trimws(html_text(ingredients_html))
}
#Helper Function
parse_block<-function(str_block,separation){
block<-trimws(str_block)
chunks<-unlist(strsplit(block,separation))
pieces<-character()
for(chunk in chunks){
unprocessed_spaces<-unlist(strsplit(chunk,"\n"))
for(proc in unprocessed_spaces){
line<-trimws(proc)
if(nchar(line)>2 && line!="Advertisement"){        #note 2 is chosen arbitrarily to avoid stand-alone numbers
pieces<-c(pieces,line)
}
}
}
pieces
}
website(input$url)
# Recipe Title
header<-sprintf("### %s\n\n",recipefor)
# Instructions
instructions<-"### Directions\n"
instructions<-paste(instructions,paste(sprintf("%d. %s", 1:length(directions), directions),collapse="\n"),sep="<br>\n<br>")
# Ingredients
ingredients_str<-"### Ingredients\n"
ingredients_str<-paste(ingredients_str,paste(sprintf("- [ ] %s\n", ingredients),collapse="\n"))
#################writeLines(sprintf("- [ ] %s\n", 1:length(ingredients), ingredients))
paste(header,instructions,ingredients_str,sep="\n")
}
ui<-dashboardPage(
dashboardHeader(title="AllRecipes Recipe Scraper"),
dashboardSidebar(textInput("url","Enter URL: "),
actionButton("search", label = "Search")),
dashboardBody(fluidRow(textOutput("recipe"))),
)
server<-function(input,output){
#output$recipe<-eventReactive(input$search,{
#  renderPrint({"HELLO WORLD!"})
#})
output$recipe<-renderText(create_text("https://www.allrecipes.com/recipe/229780/baked-denver-omelet/?internalSource=popular&referringContentType=Homepage&clickId=cardslot%202"))
}
shinyApp(ui = ui, server = server)
library(rvest)
library(shiny)
library(shinydashboard)
create_text<-function(link){
website<-function(link=link){
webpage<-read_html(link)
recipefor_html<-html_nodes(webpage,'.heading-content')    #change if using different website
recipefor<-html_text(recipefor_html)
recipefor<<-recipefor[4]                                   #change if using different website
#Fetch directions
directions_html<-html_nodes(webpage,".instructions-section")
directions_unparsed<-html_text(directions_html)
directions<<-parse_block(directions_unparsed,"Step")
#Fetch ingredients
ingredients_html<-html_nodes(webpage,".ingredients-item-name")
ingredients<<-trimws(html_text(ingredients_html))
}
#Helper Function
parse_block<-function(str_block,separation){
block<-trimws(str_block)
chunks<-unlist(strsplit(block,separation))
pieces<-character()
for(chunk in chunks){
unprocessed_spaces<-unlist(strsplit(chunk,"\n"))
for(proc in unprocessed_spaces){
line<-trimws(proc)
if(nchar(line)>2 && line!="Advertisement"){        #note 2 is chosen arbitrarily to avoid stand-alone numbers
pieces<-c(pieces,line)
}
}
}
pieces
}
website(input$url)
# Recipe Title
header<-sprintf("### %s\n\n",recipefor)
# Instructions
instructions<-"### Directions\n"
instructions<-paste(instructions,paste(sprintf("%d. %s", 1:length(directions), directions),collapse="\n"),sep="<br>\n<br>")
# Ingredients
ingredients_str<-"### Ingredients\n"
ingredients_str<-paste(ingredients_str,paste(sprintf("- [ ] %s\n", ingredients),collapse="\n"))
#################writeLines(sprintf("- [ ] %s\n", 1:length(ingredients), ingredients))
paste(header,instructions,ingredients_str,sep="\n")
}
ui<-dashboardPage(
dashboardHeader(title="AllRecipes Recipe Scraper"),
dashboardSidebar(textInput("url","Enter URL: "),
actionButton("search", label = "Search")),
dashboardBody(fluidRow(textOutput("recipe"))),
)
server<-function(input,output){
#output$recipe<-eventReactive(input$search,{
#  renderPrint({"HELLO WORLD!"})
#})
output$recipe<-eventReactive(input$search,{
renderText(create_text("https://www.allrecipes.com/recipe/229780/baked-denver-omelet/?internalSource=popular&referringContentType=Homepage&clickId=cardslot%202"))})
}
shinyApp(ui = ui, server = server)
library(rvest)
library(shiny)
library(shinydashboard)
create_text<-function(link){
website<-function(link=link){
webpage<-read_html(link)
recipefor_html<-html_nodes(webpage,'.heading-content')    #change if using different website
recipefor<-html_text(recipefor_html)
recipefor<<-recipefor[4]                                   #change if using different website
#Fetch directions
directions_html<-html_nodes(webpage,".instructions-section")
directions_unparsed<-html_text(directions_html)
directions<<-parse_block(directions_unparsed,"Step")
#Fetch ingredients
ingredients_html<-html_nodes(webpage,".ingredients-item-name")
ingredients<<-trimws(html_text(ingredients_html))
}
#Helper Function
parse_block<-function(str_block,separation){
block<-trimws(str_block)
chunks<-unlist(strsplit(block,separation))
pieces<-character()
for(chunk in chunks){
unprocessed_spaces<-unlist(strsplit(chunk,"\n"))
for(proc in unprocessed_spaces){
line<-trimws(proc)
if(nchar(line)>2 && line!="Advertisement"){        #note 2 is chosen arbitrarily to avoid stand-alone numbers
pieces<-c(pieces,line)
}
}
}
pieces
}
website(input$url)
# Recipe Title
header<-sprintf("### %s\n\n",recipefor)
# Instructions
instructions<-"### Directions\n"
instructions<-paste(instructions,paste(sprintf("%d. %s", 1:length(directions), directions),collapse="\n"),sep="<br>\n<br>")
# Ingredients
ingredients_str<-"### Ingredients\n"
ingredients_str<-paste(ingredients_str,paste(sprintf("- [ ] %s\n", ingredients),collapse="\n"))
#################writeLines(sprintf("- [ ] %s\n", 1:length(ingredients), ingredients))
paste(header,instructions,ingredients_str,sep="\n")
}
ui<-dashboardPage(
dashboardHeader(title="AllRecipes Recipe Scraper"),
dashboardSidebar(textInput("url","Enter URL: "),
actionButton("search", label = "Search")),
dashboardBody(fluidRow(textOutput("recipe"))),
)
server<-function(input,output){
#output$recipe<-eventReactive(input$search,{
#  renderPrint({"HELLO WORLD!"})
#})
output$recipe<-observeEvent(input$search,{
renderText(create_text("https://www.allrecipes.com/recipe/229780/baked-denver-omelet/?internalSource=popular&referringContentType=Homepage&clickId=cardslot%202"))})
}
shinyApp(ui = ui, server = server)
library(rvest)
library(shiny)
library(shinydashboard)
create_text<-function(link){
website<-function(link=link){
webpage<-read_html(link)
recipefor_html<-html_nodes(webpage,'.heading-content')    #change if using different website
recipefor<-html_text(recipefor_html)
recipefor<<-recipefor[4]                                   #change if using different website
#Fetch directions
directions_html<-html_nodes(webpage,".instructions-section")
directions_unparsed<-html_text(directions_html)
directions<<-parse_block(directions_unparsed,"Step")
#Fetch ingredients
ingredients_html<-html_nodes(webpage,".ingredients-item-name")
ingredients<<-trimws(html_text(ingredients_html))
}
#Helper Function
parse_block<-function(str_block,separation){
block<-trimws(str_block)
chunks<-unlist(strsplit(block,separation))
pieces<-character()
for(chunk in chunks){
unprocessed_spaces<-unlist(strsplit(chunk,"\n"))
for(proc in unprocessed_spaces){
line<-trimws(proc)
if(nchar(line)>2 && line!="Advertisement"){        #note 2 is chosen arbitrarily to avoid stand-alone numbers
pieces<-c(pieces,line)
}
}
}
pieces
}
website(input$url)
# Recipe Title
header<-sprintf("### %s\n\n",recipefor)
# Instructions
instructions<-"### Directions\n"
instructions<-paste(instructions,paste(sprintf("%d. %s", 1:length(directions), directions),collapse="\n"),sep="<br>\n<br>")
# Ingredients
ingredients_str<-"### Ingredients\n"
ingredients_str<-paste(ingredients_str,paste(sprintf("- [ ] %s\n", ingredients),collapse="\n"))
#################writeLines(sprintf("- [ ] %s\n", 1:length(ingredients), ingredients))
paste(header,instructions,ingredients_str,sep="\n")
}
ui<-dashboardPage(
dashboardHeader(title="AllRecipes Recipe Scraper"),
dashboardSidebar(textInput("url","Enter URL: "),
actionButton("search", label = "Search")),
dashboardBody(fluidRow(textOutput("recipe"))),
)
server<-function(input,output){
#output$recipe<-eventReactive(input$search,{
#  renderPrint({"HELLO WORLD!"})
#})
observeEvent(input$search,{
output$recipe<-renderText(create_text("https://www.allrecipes.com/recipe/229780/baked-denver-omelet/?internalSource=popular&referringContentType=Homepage&clickId=cardslot%202"))})
}
shinyApp(ui = ui, server = server)
runApp('C:/Users/Stanley/OneDrive - University of Toronto/My stuff/Projects/R/Recipe Web Scraper/scraper_script.R')
create_text("https://www.allrecipes.com/recipe/229780/baked-denver-omelet/?internalSource=popular&referringContentType=Homepage&clickId=cardslot%202")
create_text<-function(link){
website<-function(link=link){
webpage<-read_html(link)
recipefor_html<-html_nodes(webpage,'.heading-content')    #change if using different website
recipefor<-html_text(recipefor_html)
recipefor<<-recipefor[4]                                   #change if using different website
#Fetch directions
directions_html<-html_nodes(webpage,".instructions-section")
directions_unparsed<-html_text(directions_html)
directions<<-parse_block(directions_unparsed,"Step")
#Fetch ingredients
ingredients_html<-html_nodes(webpage,".ingredients-item-name")
ingredients<<-trimws(html_text(ingredients_html))
}
#Helper Function
parse_block<-function(str_block,separation){
block<-trimws(str_block)
chunks<-unlist(strsplit(block,separation))
pieces<-character()
for(chunk in chunks){
unprocessed_spaces<-unlist(strsplit(chunk,"\n"))
for(proc in unprocessed_spaces){
line<-trimws(proc)
if(nchar(line)>2 && line!="Advertisement"){        #note 2 is chosen arbitrarily to avoid stand-alone numbers
pieces<-c(pieces,line)
}
}
}
pieces
}
website(link)
# Recipe Title
header<-sprintf("### %s\n\n",recipefor)
# Instructions
instructions<-"### Directions\n"
instructions<-paste(instructions,paste(sprintf("%d. %s", 1:length(directions), directions),collapse="\n"),sep="<br>\n<br>")
# Ingredients
ingredients_str<-"### Ingredients\n"
ingredients_str<-paste(ingredients_str,paste(sprintf("- [ ] %s\n", ingredients),collapse="\n"))
#################writeLines(sprintf("- [ ] %s\n", 1:length(ingredients), ingredients))
paste(header,instructions,ingredients_str,sep="\n")
}
ui<-dashboardPage(
dashboardHeader(title="AllRecipes Recipe Scraper"),
dashboardSidebar(textInput("url","Enter URL: "),
actionButton("search", label = "Search")),
dashboardBody(fluidRow(textOutput("recipe"))),
)
create_text("https://www.allrecipes.com/recipe/229780/baked-denver-omelet/?internalSource=popular&referringContentType=Homepage&clickId=cardslot%202")
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::stop_server()
blogdown::build_site()
blogdown::stop_server()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::stop_server()
title: "Courses Completed"
subtitle: ""
summary: ""
authors: []
tags: []
categories: []
date: 2020-07-03T18:50:01-04:00
lastmod: 2020-07-03T18:50:01-04:00
featured: false
draft: false
share: false
---
<style>
summary h3{
display: inline-block;
font-size:20px;
font-family:"Times New Roman";
color: #476e52;
}
</style>
<details>
<summary>
<h3>University of Toronto</h3>
</summary>
<p>
- [x] *CSC108*,   <span style="padding-left: 10px; display:inline"> Introduction to Computer Programming</span>
library(DT)
install.packages("DT")
library(DT)
pwd
getwd
getwd()
blogdown::build_site()
library(DT)
library(tidyverse)
path<-"static/files/"
first_name<-"first_year.csv"
second_name<-"second_year.csv"
first_year<-read.csv(paste(path,first_name))
path<-"/static/files/"
first_name<-"first_year.csv"
second_name<-"second_year.csv"
first_year<-read.csv(paste(path,first_name))
getwd()
read.csv("static/files/first_year.csv")
first_year<-read.csv(paste(path,first_name,sep=""))
second_year<-read.csv(paste(path,second_name,sep=""))
path<-"static/files/"
first_name<-"first_year.csv"
second_name<-"second_year.csv"
first_year<-read.csv(paste(path,first_name,sep=""))
paste(path,first_name,sep="")
read.csv(paste(path,first_name,sep=""))
read.csv(paste(path,second_name,sep=""))
first_name
first_year<-read.csv(paste(path,first_name,sep=""))
first_year
first_year<-read.csv(paste(path,first_name,sep=""))
first_year
library(DT)
library(tidyverse)
path<-"static/files/"
first_name<-"first_year.csv"
second_name<-"second_year.csv"
first_year<-read.csv(paste(path,first_name,sep=""))
second_year<-read.csv(paste(path,second_name,sep=""))
first_year %>% datatable(rownames = FALSE,
options = list(
pageLength = 11,
autoWidth = TRUE,
columnDefs = list(list(
className = 'dt-left',
targets = 0),
list(className = 'dt-center', targets = 1))))
second_year
rbind(first_year,second_year)
rbind(first_year,second_year) %>% datatable(rownames = FALSE,
options = list(
pageLength = 11,
autoWidth = TRUE,
columnDefs = list(list(
className = 'dt-left',
targets = 0),
list(className = 'dt-center', targets = 1))))
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
path<-"/static/files/"
first_name<-"first_year.csv"
second_name<-"second_year.csv"
first_year<-read.csv(paste(path,first_name,sep=""))
second_year<-read.csv(paste(path,second_name,sep=""))
path<-"static/files/"
first_name<-"first_year.csv"
second_name<-"second_year.csv"
first_year<-read.csv(paste(path,first_name,sep=""))
second_year<-read.csv(paste(path,second_name,sep=""))
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
rbind(second_year,first_year) %>% datatable(rownames = FALSE,
options = list(
pageLength = 5,
autoWidth = TRUE,
columnDefs = list(list(
className = 'dt-left',
targets = 0),
list(className = 'dt-center', targets = 1))))
install.packages("widgetframe")
library(widgetframe)
blogdown::stop_server()
blogdown::serve_site()
blogdown:::new_post_addin()
install.packages("kableExtra")
library(kableExtra)
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
library(ggplot2, ggthemes)
set.seed(1999)
age<-runiform(n=100, min=0, max=80)
weight<-runiform(n=100,min=50, max=125)
df<-data.frame("Age"=age,"Weight"=weight)
df %>% ggplot(aes("Age","Weight")) +
geom_point() +
theme_classic()
%>%
library(ggplot2, ggthemes,tidyverse)
set.seed(1999)
age<-runiform(n=100, min=0, max=80)
weight<-runiform(n=100,min=50, max=125)
df<-data.frame("Age"=age,"Weight"=weight)
df %>% ggplot(aes("Age","Weight")) +
geom_point() +
theme_classic()
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(tidyverse)
set.seed(1999)
age<-runiform(n=100, min=0, max=80)
weight<-runiform(n=100,min=50, max=125)
df<-data.frame("Age"=age,"Weight"=weight)
df %>% ggplot(aes("Age","Weight")) +
geom_point() +
theme_classic()
df %>% ggplot(aes("Age","Weight")) +
geom_point() +
theme_classic()
df %>% ggplot(aes=aes("Age","Weight")) +
geom_point() +
theme_classic()
df %>% ggplot(mapping=aes("Age","Weight")) +
geom_point() +
theme_classic()
df
example_df<-data.frame("Age"=age,"Weight"=weight)
ggplot(data=example_df,mapping=aes("Age","Weight")) +
geom_point() +
theme_classic()
age<-runiform(n=100, min=0, max=80)
weight<-runiform(n=100,min=50, max=125)
example_df<-data.frame("Age"=age,"Weight"=weight)
age
age<-runiform(n=100, min=0, max=80)
runiform
age<-runif(n=100, min=0, max=80)
weight<-runif(n=100,min=50, max=125)
example_df<-data.frame("Age"=age,"Weight"=weight)
age
example_df
ggplot(data=example_df,mapping=aes("Age","Weight")) +
geom_point() +
theme_classic()
ggplot(data=example_df,mapping=aes(Age,Weight)) +
geom_point() +
theme_classic()
age<-runif(n=100, min=0, max=80)
weight<-rnorm(n=100,min=50, max=125)
example_df<-data.frame("Age"=age,"Weight"=weight)
ggplot(data=example_df,mapping=aes(Age,Weight)) +
geom_point() +
theme_classic()
rnorm
age<-runif(n=100, min=0, max=80)
weight<-rnorm(n=100, 75, 50)
example_df<-data.frame("Age"=age,"Weight"=weight)
ggplot(data=example_df,mapping=aes(Age,Weight)) +
geom_point() +
theme_classic()
age<-runif(n=100, min=0, max=80)
weight<-age+rnorm(n=100, 75, 50)
example_df<-data.frame("Age"=age,"Weight"=weight)
ggplot(data=example_df,mapping=aes(Age,Weight)) +
geom_point() +
theme_classic()
age<-runif(n=100, min=0, max=80)
weight<-age+rnorm(n=100, 75, 15)
example_df<-data.frame("Age"=age,"Weight"=weight)
ggplot(data=example_df,mapping=aes(Age,Weight)) +
geom_point() +
theme_classic()
ggplot(data=example_df,mapping=aes(Age,Weight)) +
geom_point() +
theme_classic() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank())
