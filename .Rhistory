pieces<-c(pieces,line)
}
}
}
pieces
}
website(input$url)
# Recipe Title
header<-sprintf("### %s\n\n",recipefor)
# Instructions
instructions<-"### Directions\n"
instructions<-paste(instructions,paste(sprintf("%d. %s", 1:length(directions), directions),collapse="\n"),sep="<br>\n<br>")
# Ingredients
ingredients_str<-"### Ingredients\n"
ingredients_str<-paste(ingredients_str,paste(sprintf("- [ ] %s\n", ingredients),collapse="\n"))
#################writeLines(sprintf("- [ ] %s\n", 1:length(ingredients), ingredients))
paste(header,instructions,ingredients_str,sep="\n")
}
ui<-dashboardPage(
dashboardHeader(titlePanel="AllRecipes Recipe Scraper"),
dashboardSidebar(textInput("url","Enter URL: "),
actionButton("search", label = "Search")),
dashboardBody(fluidRow(textOutput("recipe")))
)
server<-function(input,output){
output$recipe<-eventReactive(input$search,{
renderText({"HELLO WORLD!"})
})
}
shinyApp(ui = ui, server = server)
library(rvest)
library(shiny)
library(shinydashboard)
create_text<-function(link){
website<-function(link=link){
webpage<-read_html(link)
recipefor_html<-html_nodes(webpage,'.heading-content')    #change if using different website
recipefor<-html_text(recipefor_html)
recipefor<<-recipefor[4]                                   #change if using different website
#Fetch directions
directions_html<-html_nodes(webpage,".instructions-section")
directions_unparsed<-html_text(directions_html)
directions<<-parse_block(directions_unparsed,"Step")
#Fetch ingredients
ingredients_html<-html_nodes(webpage,".ingredients-item-name")
ingredients<<-trimws(html_text(ingredients_html))
}
#Helper Function
parse_block<-function(str_block,separation){
block<-trimws(str_block)
chunks<-unlist(strsplit(block,separation))
pieces<-character()
for(chunk in chunks){
unprocessed_spaces<-unlist(strsplit(chunk,"\n"))
for(proc in unprocessed_spaces){
line<-trimws(proc)
if(nchar(line)>2 && line!="Advertisement"){        #note 2 is chosen arbitrarily to avoid stand-alone numbers
pieces<-c(pieces,line)
}
}
}
pieces
}
website(input$url)
# Recipe Title
header<-sprintf("### %s\n\n",recipefor)
# Instructions
instructions<-"### Directions\n"
instructions<-paste(instructions,paste(sprintf("%d. %s", 1:length(directions), directions),collapse="\n"),sep="<br>\n<br>")
# Ingredients
ingredients_str<-"### Ingredients\n"
ingredients_str<-paste(ingredients_str,paste(sprintf("- [ ] %s\n", ingredients),collapse="\n"))
#################writeLines(sprintf("- [ ] %s\n", 1:length(ingredients), ingredients))
paste(header,instructions,ingredients_str,sep="\n")
}
ui<-dashboardPage(
dashboardHeader(title="AllRecipes Recipe Scraper"),
dashboardSidebar(textInput("url","Enter URL: "),
actionButton("search", label = "Search")),
dashboardBody(fluidRow(textOutput("recipe"))),
)
server<-function(input,output){
output$recipe<-eventReactive(input$search,{
renderText({"HELLO WORLD!"})
})
}
shinyApp(ui = ui, server = server)
runApp('C:/Users/Stanley/OneDrive - University of Toronto/My stuff/Projects/R/Recipe Web Scraper/scraper_script.R')
runApp('C:/Users/Stanley/OneDrive - University of Toronto/My stuff/Projects/R/Recipe Web Scraper/scraper_script.R')
runApp('scraper_script.R')
library(rvest)
library(shiny)
library(shinydashboard)
create_text<-function(link){
website<-function(link=link){
webpage<-read_html(link)
recipefor_html<-html_nodes(webpage,'.heading-content')    #change if using different website
recipefor<-html_text(recipefor_html)
recipefor<<-recipefor[4]                                   #change if using different website
#Fetch directions
directions_html<-html_nodes(webpage,".instructions-section")
directions_unparsed<-html_text(directions_html)
directions<<-parse_block(directions_unparsed,"Step")
#Fetch ingredients
ingredients_html<-html_nodes(webpage,".ingredients-item-name")
ingredients<<-trimws(html_text(ingredients_html))
}
#Helper Function
parse_block<-function(str_block,separation){
block<-trimws(str_block)
chunks<-unlist(strsplit(block,separation))
pieces<-character()
for(chunk in chunks){
unprocessed_spaces<-unlist(strsplit(chunk,"\n"))
for(proc in unprocessed_spaces){
line<-trimws(proc)
if(nchar(line)>2 && line!="Advertisement"){        #note 2 is chosen arbitrarily to avoid stand-alone numbers
pieces<-c(pieces,line)
}
}
}
pieces
}
website(input$url)
# Recipe Title
header<-sprintf("### %s\n\n",recipefor)
# Instructions
instructions<-"### Directions\n"
instructions<-paste(instructions,paste(sprintf("%d. %s", 1:length(directions), directions),collapse="\n"),sep="<br>\n<br>")
# Ingredients
ingredients_str<-"### Ingredients\n"
ingredients_str<-paste(ingredients_str,paste(sprintf("- [ ] %s\n", ingredients),collapse="\n"))
#################writeLines(sprintf("- [ ] %s\n", 1:length(ingredients), ingredients))
paste(header,instructions,ingredients_str,sep="\n")
}
ui<-dashboardPage(
dashboardHeader(title="AllRecipes Recipe Scraper"),
dashboardSidebar(textInput("url","Enter URL: "),
actionButton("search", label = "Search")),
dashboardBody(fluidRow(textOutput("recipe"))),
)
server<-function(input,output){
#output$recipe<-eventReactive(input$search,{
#  renderPrint({"HELLO WORLD!"})
#})
output$recipe<-renderText("Hello World")
}
shinyApp(ui = ui, server = server)
runApp('scraper_script.R')
runApp('C:/Users/Stanley/OneDrive - University of Toronto/My stuff/Projects/R/Recipe Web Scraper/scraper_script.R')
runApp('C:/Users/Stanley/OneDrive - University of Toronto/My stuff/Projects/R/Recipe Web Scraper/scraper_script.R')
library(rvest)
library(shiny)
library(shinydashboard)
create_text<-function(link){
website<-function(link=link){
webpage<-read_html(link)
recipefor_html<-html_nodes(webpage,'.heading-content')    #change if using different website
recipefor<-html_text(recipefor_html)
recipefor<<-recipefor[4]                                   #change if using different website
#Fetch directions
directions_html<-html_nodes(webpage,".instructions-section")
directions_unparsed<-html_text(directions_html)
directions<<-parse_block(directions_unparsed,"Step")
#Fetch ingredients
ingredients_html<-html_nodes(webpage,".ingredients-item-name")
ingredients<<-trimws(html_text(ingredients_html))
}
#Helper Function
parse_block<-function(str_block,separation){
block<-trimws(str_block)
chunks<-unlist(strsplit(block,separation))
pieces<-character()
for(chunk in chunks){
unprocessed_spaces<-unlist(strsplit(chunk,"\n"))
for(proc in unprocessed_spaces){
line<-trimws(proc)
if(nchar(line)>2 && line!="Advertisement"){        #note 2 is chosen arbitrarily to avoid stand-alone numbers
pieces<-c(pieces,line)
}
}
}
pieces
}
website(input$url)
# Recipe Title
header<-sprintf("### %s\n\n",recipefor)
# Instructions
instructions<-"### Directions\n"
instructions<-paste(instructions,paste(sprintf("%d. %s", 1:length(directions), directions),collapse="\n"),sep="<br>\n<br>")
# Ingredients
ingredients_str<-"### Ingredients\n"
ingredients_str<-paste(ingredients_str,paste(sprintf("- [ ] %s\n", ingredients),collapse="\n"))
#################writeLines(sprintf("- [ ] %s\n", 1:length(ingredients), ingredients))
paste(header,instructions,ingredients_str,sep="\n")
}
ui<-dashboardPage(
dashboardHeader(title="AllRecipes Recipe Scraper"),
dashboardSidebar(textInput("url","Enter URL: "),
actionButton("search", label = "Search")),
dashboardBody(fluidRow(textOutput("recipe"))),
)
server<-function(input,output){
#output$recipe<-eventReactive(input$search,{
#  renderPrint({"HELLO WORLD!"})
#})
output$recipe<-renderText(create_text("https://www.allrecipes.com/recipe/229780/baked-denver-omelet/?internalSource=popular&referringContentType=Homepage&clickId=cardslot%202"))
}
shinyApp(ui = ui, server = server)
library(rvest)
library(shiny)
library(shinydashboard)
create_text<-function(link){
website<-function(link=link){
webpage<-read_html(link)
recipefor_html<-html_nodes(webpage,'.heading-content')    #change if using different website
recipefor<-html_text(recipefor_html)
recipefor<<-recipefor[4]                                   #change if using different website
#Fetch directions
directions_html<-html_nodes(webpage,".instructions-section")
directions_unparsed<-html_text(directions_html)
directions<<-parse_block(directions_unparsed,"Step")
#Fetch ingredients
ingredients_html<-html_nodes(webpage,".ingredients-item-name")
ingredients<<-trimws(html_text(ingredients_html))
}
#Helper Function
parse_block<-function(str_block,separation){
block<-trimws(str_block)
chunks<-unlist(strsplit(block,separation))
pieces<-character()
for(chunk in chunks){
unprocessed_spaces<-unlist(strsplit(chunk,"\n"))
for(proc in unprocessed_spaces){
line<-trimws(proc)
if(nchar(line)>2 && line!="Advertisement"){        #note 2 is chosen arbitrarily to avoid stand-alone numbers
pieces<-c(pieces,line)
}
}
}
pieces
}
website(input$url)
# Recipe Title
header<-sprintf("### %s\n\n",recipefor)
# Instructions
instructions<-"### Directions\n"
instructions<-paste(instructions,paste(sprintf("%d. %s", 1:length(directions), directions),collapse="\n"),sep="<br>\n<br>")
# Ingredients
ingredients_str<-"### Ingredients\n"
ingredients_str<-paste(ingredients_str,paste(sprintf("- [ ] %s\n", ingredients),collapse="\n"))
#################writeLines(sprintf("- [ ] %s\n", 1:length(ingredients), ingredients))
paste(header,instructions,ingredients_str,sep="\n")
}
ui<-dashboardPage(
dashboardHeader(title="AllRecipes Recipe Scraper"),
dashboardSidebar(textInput("url","Enter URL: "),
actionButton("search", label = "Search")),
dashboardBody(fluidRow(textOutput("recipe"))),
)
server<-function(input,output){
#output$recipe<-eventReactive(input$search,{
#  renderPrint({"HELLO WORLD!"})
#})
output$recipe<-renderText(create_text("https://www.allrecipes.com/recipe/229780/baked-denver-omelet/?internalSource=popular&referringContentType=Homepage&clickId=cardslot%202"))
}
shinyApp(ui = ui, server = server)
library(rvest)
library(shiny)
library(shinydashboard)
create_text<-function(link){
website<-function(link=link){
webpage<-read_html(link)
recipefor_html<-html_nodes(webpage,'.heading-content')    #change if using different website
recipefor<-html_text(recipefor_html)
recipefor<<-recipefor[4]                                   #change if using different website
#Fetch directions
directions_html<-html_nodes(webpage,".instructions-section")
directions_unparsed<-html_text(directions_html)
directions<<-parse_block(directions_unparsed,"Step")
#Fetch ingredients
ingredients_html<-html_nodes(webpage,".ingredients-item-name")
ingredients<<-trimws(html_text(ingredients_html))
}
#Helper Function
parse_block<-function(str_block,separation){
block<-trimws(str_block)
chunks<-unlist(strsplit(block,separation))
pieces<-character()
for(chunk in chunks){
unprocessed_spaces<-unlist(strsplit(chunk,"\n"))
for(proc in unprocessed_spaces){
line<-trimws(proc)
if(nchar(line)>2 && line!="Advertisement"){        #note 2 is chosen arbitrarily to avoid stand-alone numbers
pieces<-c(pieces,line)
}
}
}
pieces
}
website(input$url)
# Recipe Title
header<-sprintf("### %s\n\n",recipefor)
# Instructions
instructions<-"### Directions\n"
instructions<-paste(instructions,paste(sprintf("%d. %s", 1:length(directions), directions),collapse="\n"),sep="<br>\n<br>")
# Ingredients
ingredients_str<-"### Ingredients\n"
ingredients_str<-paste(ingredients_str,paste(sprintf("- [ ] %s\n", ingredients),collapse="\n"))
#################writeLines(sprintf("- [ ] %s\n", 1:length(ingredients), ingredients))
paste(header,instructions,ingredients_str,sep="\n")
}
ui<-dashboardPage(
dashboardHeader(title="AllRecipes Recipe Scraper"),
dashboardSidebar(textInput("url","Enter URL: "),
actionButton("search", label = "Search")),
dashboardBody(fluidRow(textOutput("recipe"))),
)
server<-function(input,output){
#output$recipe<-eventReactive(input$search,{
#  renderPrint({"HELLO WORLD!"})
#})
output$recipe<-eventReactive(input$search,{
renderText(create_text("https://www.allrecipes.com/recipe/229780/baked-denver-omelet/?internalSource=popular&referringContentType=Homepage&clickId=cardslot%202"))})
}
shinyApp(ui = ui, server = server)
library(rvest)
library(shiny)
library(shinydashboard)
create_text<-function(link){
website<-function(link=link){
webpage<-read_html(link)
recipefor_html<-html_nodes(webpage,'.heading-content')    #change if using different website
recipefor<-html_text(recipefor_html)
recipefor<<-recipefor[4]                                   #change if using different website
#Fetch directions
directions_html<-html_nodes(webpage,".instructions-section")
directions_unparsed<-html_text(directions_html)
directions<<-parse_block(directions_unparsed,"Step")
#Fetch ingredients
ingredients_html<-html_nodes(webpage,".ingredients-item-name")
ingredients<<-trimws(html_text(ingredients_html))
}
#Helper Function
parse_block<-function(str_block,separation){
block<-trimws(str_block)
chunks<-unlist(strsplit(block,separation))
pieces<-character()
for(chunk in chunks){
unprocessed_spaces<-unlist(strsplit(chunk,"\n"))
for(proc in unprocessed_spaces){
line<-trimws(proc)
if(nchar(line)>2 && line!="Advertisement"){        #note 2 is chosen arbitrarily to avoid stand-alone numbers
pieces<-c(pieces,line)
}
}
}
pieces
}
website(input$url)
# Recipe Title
header<-sprintf("### %s\n\n",recipefor)
# Instructions
instructions<-"### Directions\n"
instructions<-paste(instructions,paste(sprintf("%d. %s", 1:length(directions), directions),collapse="\n"),sep="<br>\n<br>")
# Ingredients
ingredients_str<-"### Ingredients\n"
ingredients_str<-paste(ingredients_str,paste(sprintf("- [ ] %s\n", ingredients),collapse="\n"))
#################writeLines(sprintf("- [ ] %s\n", 1:length(ingredients), ingredients))
paste(header,instructions,ingredients_str,sep="\n")
}
ui<-dashboardPage(
dashboardHeader(title="AllRecipes Recipe Scraper"),
dashboardSidebar(textInput("url","Enter URL: "),
actionButton("search", label = "Search")),
dashboardBody(fluidRow(textOutput("recipe"))),
)
server<-function(input,output){
#output$recipe<-eventReactive(input$search,{
#  renderPrint({"HELLO WORLD!"})
#})
output$recipe<-observeEvent(input$search,{
renderText(create_text("https://www.allrecipes.com/recipe/229780/baked-denver-omelet/?internalSource=popular&referringContentType=Homepage&clickId=cardslot%202"))})
}
shinyApp(ui = ui, server = server)
library(rvest)
library(shiny)
library(shinydashboard)
create_text<-function(link){
website<-function(link=link){
webpage<-read_html(link)
recipefor_html<-html_nodes(webpage,'.heading-content')    #change if using different website
recipefor<-html_text(recipefor_html)
recipefor<<-recipefor[4]                                   #change if using different website
#Fetch directions
directions_html<-html_nodes(webpage,".instructions-section")
directions_unparsed<-html_text(directions_html)
directions<<-parse_block(directions_unparsed,"Step")
#Fetch ingredients
ingredients_html<-html_nodes(webpage,".ingredients-item-name")
ingredients<<-trimws(html_text(ingredients_html))
}
#Helper Function
parse_block<-function(str_block,separation){
block<-trimws(str_block)
chunks<-unlist(strsplit(block,separation))
pieces<-character()
for(chunk in chunks){
unprocessed_spaces<-unlist(strsplit(chunk,"\n"))
for(proc in unprocessed_spaces){
line<-trimws(proc)
if(nchar(line)>2 && line!="Advertisement"){        #note 2 is chosen arbitrarily to avoid stand-alone numbers
pieces<-c(pieces,line)
}
}
}
pieces
}
website(input$url)
# Recipe Title
header<-sprintf("### %s\n\n",recipefor)
# Instructions
instructions<-"### Directions\n"
instructions<-paste(instructions,paste(sprintf("%d. %s", 1:length(directions), directions),collapse="\n"),sep="<br>\n<br>")
# Ingredients
ingredients_str<-"### Ingredients\n"
ingredients_str<-paste(ingredients_str,paste(sprintf("- [ ] %s\n", ingredients),collapse="\n"))
#################writeLines(sprintf("- [ ] %s\n", 1:length(ingredients), ingredients))
paste(header,instructions,ingredients_str,sep="\n")
}
ui<-dashboardPage(
dashboardHeader(title="AllRecipes Recipe Scraper"),
dashboardSidebar(textInput("url","Enter URL: "),
actionButton("search", label = "Search")),
dashboardBody(fluidRow(textOutput("recipe"))),
)
server<-function(input,output){
#output$recipe<-eventReactive(input$search,{
#  renderPrint({"HELLO WORLD!"})
#})
observeEvent(input$search,{
output$recipe<-renderText(create_text("https://www.allrecipes.com/recipe/229780/baked-denver-omelet/?internalSource=popular&referringContentType=Homepage&clickId=cardslot%202"))})
}
shinyApp(ui = ui, server = server)
runApp('C:/Users/Stanley/OneDrive - University of Toronto/My stuff/Projects/R/Recipe Web Scraper/scraper_script.R')
create_text("https://www.allrecipes.com/recipe/229780/baked-denver-omelet/?internalSource=popular&referringContentType=Homepage&clickId=cardslot%202")
create_text<-function(link){
website<-function(link=link){
webpage<-read_html(link)
recipefor_html<-html_nodes(webpage,'.heading-content')    #change if using different website
recipefor<-html_text(recipefor_html)
recipefor<<-recipefor[4]                                   #change if using different website
#Fetch directions
directions_html<-html_nodes(webpage,".instructions-section")
directions_unparsed<-html_text(directions_html)
directions<<-parse_block(directions_unparsed,"Step")
#Fetch ingredients
ingredients_html<-html_nodes(webpage,".ingredients-item-name")
ingredients<<-trimws(html_text(ingredients_html))
}
#Helper Function
parse_block<-function(str_block,separation){
block<-trimws(str_block)
chunks<-unlist(strsplit(block,separation))
pieces<-character()
for(chunk in chunks){
unprocessed_spaces<-unlist(strsplit(chunk,"\n"))
for(proc in unprocessed_spaces){
line<-trimws(proc)
if(nchar(line)>2 && line!="Advertisement"){        #note 2 is chosen arbitrarily to avoid stand-alone numbers
pieces<-c(pieces,line)
}
}
}
pieces
}
website(link)
# Recipe Title
header<-sprintf("### %s\n\n",recipefor)
# Instructions
instructions<-"### Directions\n"
instructions<-paste(instructions,paste(sprintf("%d. %s", 1:length(directions), directions),collapse="\n"),sep="<br>\n<br>")
# Ingredients
ingredients_str<-"### Ingredients\n"
ingredients_str<-paste(ingredients_str,paste(sprintf("- [ ] %s\n", ingredients),collapse="\n"))
#################writeLines(sprintf("- [ ] %s\n", 1:length(ingredients), ingredients))
paste(header,instructions,ingredients_str,sep="\n")
}
ui<-dashboardPage(
dashboardHeader(title="AllRecipes Recipe Scraper"),
dashboardSidebar(textInput("url","Enter URL: "),
actionButton("search", label = "Search")),
dashboardBody(fluidRow(textOutput("recipe"))),
)
create_text("https://www.allrecipes.com/recipe/229780/baked-denver-omelet/?internalSource=popular&referringContentType=Homepage&clickId=cardslot%202")
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::stop_server()
blogdown::build_site()
blogdown::stop_server()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
