ingredients_str<-"### Ingredients\n"
ingredients_str<-paste(ingredients_str,paste(sprintf("- [ ] %s\n", ingredients),collapse="\n"))
#################writeLines(sprintf("- [ ] %s\n", 1:length(ingredients), ingredients))
paste(header,instructions,ingredients_str,sep="\n")
}
ui<-fluidPage(
titlePanel("AllRecipes Recipe Scraper"),
textInput("url","Enter URL: "),
actionButton("search", label = "Search"),
textOutput("recipe")
)
server<-function(input,output){
output$recipe<-eventReactive(input$search,renderText(create_text()))
}
shinyApp(ui = ui, server = server)
library(rvest)
library(shiny)
library(flexdashboard)
create_text<-function(){
website<-function(link){
webpage<-read_html(link)
recipefor_html<-html_nodes(webpage,'.heading-content')    #change if using different website
recipefor<-html_text(recipefor_html)
recipefor<<-recipefor[4]                                   #change if using different website
#Fetch directions
directions_html<-html_nodes(webpage,".instructions-section")
directions_unparsed<-html_text(directions_html)
directions<<-parse_block(directions_unparsed,"Step")
#Fetch ingredients
ingredients_html<-html_nodes(webpage,".ingredients-item-name")
ingredients<<-trimws(html_text(ingredients_html))
}
#Helper Function
parse_block<-function(str_block,separation){
block<-trimws(str_block)
chunks<-unlist(strsplit(block,separation))
pieces<-character()
for(chunk in chunks){
unprocessed_spaces<-unlist(strsplit(chunk,"\n"))
for(proc in unprocessed_spaces){
line<-trimws(proc)
if(nchar(line)>2 && line!="Advertisement"){        #note 2 is chosen arbitrarily to avoid stand-alone numbers
pieces<-c(pieces,line)
}
}
}
pieces
}
website(input$url)
# Recipe Title
header<-sprintf("### %s\n\n",recipefor)
# Instructions
instructions<-"### Directions\n"
instructions<-paste(instructions,paste(sprintf("%d. %s", 1:length(directions), directions),collapse="\n"),sep="<br>\n<br>")
# Ingredients
ingredients_str<-"### Ingredients\n"
ingredients_str<-paste(ingredients_str,paste(sprintf("- [ ] %s\n", ingredients),collapse="\n"))
#################writeLines(sprintf("- [ ] %s\n", 1:length(ingredients), ingredients))
paste(header,instructions,ingredients_str,sep="\n")
}
ui<-fluidPage(
titlePanel("AllRecipes Recipe Scraper"),
textInput("url","Enter URL: "),
actionButton("search", label = "Search"),
textOutput("recipe")
)
server<-function(input,output){
eventReactive(input$search,{
output$recipe<-renderText(create_text())
})
}
shinyApp(ui = ui, server = server)
library(rvest)
library(shiny)
library(flexdashboard)
create_text<-function(){
website<-function(link){
webpage<-read_html(link)
recipefor_html<-html_nodes(webpage,'.heading-content')    #change if using different website
recipefor<-html_text(recipefor_html)
recipefor<<-recipefor[4]                                   #change if using different website
#Fetch directions
directions_html<-html_nodes(webpage,".instructions-section")
directions_unparsed<-html_text(directions_html)
directions<<-parse_block(directions_unparsed,"Step")
#Fetch ingredients
ingredients_html<-html_nodes(webpage,".ingredients-item-name")
ingredients<<-trimws(html_text(ingredients_html))
}
#Helper Function
parse_block<-function(str_block,separation){
block<-trimws(str_block)
chunks<-unlist(strsplit(block,separation))
pieces<-character()
for(chunk in chunks){
unprocessed_spaces<-unlist(strsplit(chunk,"\n"))
for(proc in unprocessed_spaces){
line<-trimws(proc)
if(nchar(line)>2 && line!="Advertisement"){        #note 2 is chosen arbitrarily to avoid stand-alone numbers
pieces<-c(pieces,line)
}
}
}
pieces
}
website(input$url)
# Recipe Title
header<-sprintf("### %s\n\n",recipefor)
# Instructions
instructions<-"### Directions\n"
instructions<-paste(instructions,paste(sprintf("%d. %s", 1:length(directions), directions),collapse="\n"),sep="<br>\n<br>")
# Ingredients
ingredients_str<-"### Ingredients\n"
ingredients_str<-paste(ingredients_str,paste(sprintf("- [ ] %s\n", ingredients),collapse="\n"))
#################writeLines(sprintf("- [ ] %s\n", 1:length(ingredients), ingredients))
paste(header,instructions,ingredients_str,sep="\n")
}
ui<-fluidPage(
titlePanel("AllRecipes Recipe Scraper"),
textInput("url","Enter URL: "),
actionButton("search", label = "Search"),
textOutput("recipe")
)
server<-function(input,output){
output$recipe<-eventReactive(input$search,{
renderText(create_text())
})
}
shinyApp(ui = ui, server = server)
library(rvest)
library(shiny)
library(flexdashboard)
create_text<-function(link){
website<-function(link=link){
webpage<-read_html(link)
recipefor_html<-html_nodes(webpage,'.heading-content')    #change if using different website
recipefor<-html_text(recipefor_html)
recipefor<<-recipefor[4]                                   #change if using different website
#Fetch directions
directions_html<-html_nodes(webpage,".instructions-section")
directions_unparsed<-html_text(directions_html)
directions<<-parse_block(directions_unparsed,"Step")
#Fetch ingredients
ingredients_html<-html_nodes(webpage,".ingredients-item-name")
ingredients<<-trimws(html_text(ingredients_html))
}
#Helper Function
parse_block<-function(str_block,separation){
block<-trimws(str_block)
chunks<-unlist(strsplit(block,separation))
pieces<-character()
for(chunk in chunks){
unprocessed_spaces<-unlist(strsplit(chunk,"\n"))
for(proc in unprocessed_spaces){
line<-trimws(proc)
if(nchar(line)>2 && line!="Advertisement"){        #note 2 is chosen arbitrarily to avoid stand-alone numbers
pieces<-c(pieces,line)
}
}
}
pieces
}
website(input$url)
# Recipe Title
header<-sprintf("### %s\n\n",recipefor)
# Instructions
instructions<-"### Directions\n"
instructions<-paste(instructions,paste(sprintf("%d. %s", 1:length(directions), directions),collapse="\n"),sep="<br>\n<br>")
# Ingredients
ingredients_str<-"### Ingredients\n"
ingredients_str<-paste(ingredients_str,paste(sprintf("- [ ] %s\n", ingredients),collapse="\n"))
#################writeLines(sprintf("- [ ] %s\n", 1:length(ingredients), ingredients))
paste(header,instructions,ingredients_str,sep="\n")
}
ui<-fluidPage(
titlePanel("AllRecipes Recipe Scraper"),
textInput("url","Enter URL: "),
actionButton("search", label = "Search"),
textOutput("recipe")
)
server<-function(input,output){
output$recipe<-eventReactive(input$search,{
renderText(create_text(input$url))
})
}
shinyApp(ui = ui, server = server)
---
title: Recipe Scraping
author: ''
date: ''
slug: recipe-scraping
categories:
- R
tags:
- Data Wrangling
output: flexdashboard::flex_dashboard
runtime: shiny
draft: TRUE
---
<!-- ### Preface -->
<!-- This is a scrapping tool made to obtain recipes easily from AllRecipes.com. -->
<!-- <!-- FUTURE PLANS: Give option for advanced settings (so other sites can be used), and give option to generate PDF --> -->
<!-- --- -->
<!-- ```{r setup,include=FALSE} -->
<!-- library(rvest) -->
<!-- library(shiny) -->
<!-- library(flexdashboard) -->
<!-- ``` -->
<!-- ```{r, echo=FALSE} -->
<!-- textInput("url","Enter URL: ") -->
<!-- ``` -->
<!-- ```{r, echo=FALSE} -->
<!-- ``` -->
<!-- ```{r, echo=FALSE} -->
<!-- create_text<-function(){ -->
<!--   website<-function(link){ -->
<!--     webpage<-read_html(link) -->
<!--     recipefor_html<-html_nodes(webpage,'.heading-content')    #change if using different website -->
<!--     recipefor<-html_text(recipefor_html) -->
<!--     recipefor<<-recipefor[4]                                   #change if using different website -->
<!--     #Fetch directions -->
<!--     directions_html<-html_nodes(webpage,".instructions-section") -->
<!--     directions_unparsed<-html_text(directions_html) -->
<!--     directions<<-parse_block(directions_unparsed,"Step") -->
<!--     #Fetch ingredients -->
<!--     ingredients_html<-html_nodes(webpage,".ingredients-item-name") -->
<!--     ingredients<<-trimws(html_text(ingredients_html)) -->
<!--   } -->
<!--   #Helper Function -->
<!--   parse_block<-function(str_block,separation){ -->
<!--     block<-trimws(str_block) -->
<!--     chunks<-unlist(strsplit(block,separation)) -->
<!--     pieces<-character() -->
<!--     for(chunk in chunks){ -->
<!--       unprocessed_spaces<-unlist(strsplit(chunk,"\n")) -->
<!--       for(proc in unprocessed_spaces){ -->
<!--         line<-trimws(proc) -->
<!--         if(nchar(line)>2 && line!="Advertisement"){        #note 2 is chosen arbitrarily to avoid stand-alone numbers -->
<!--           pieces<-c(pieces,line) -->
<!--         } -->
<!--       } -->
<!--     } -->
<!--     pieces -->
<!--   } -->
<!--   website(input$url) -->
<!--   # Recipe Title -->
<!--   header<-sprintf("### %s\n\n",recipefor) -->
<!--   # Instructions -->
<!--   instructions<-"### Directions\n" -->
<!--   instructions<-paste(instructions,paste(sprintf("%d. %s", 1:length(directions), directions),collapse="\n"),sep="<br>\n<br>") -->
<!--   # Ingredients -->
<!--   ingredients_str<-"### Ingredients\n" -->
<!--   ingredients_str<-paste(ingredients_str,paste(sprintf("- [ ] %s\n", ingredients),collapse="\n")) -->
<!--   #################writeLines(sprintf("- [ ] %s\n", 1:length(ingredients), ingredients)) -->
<!--   paste(header,instructions,ingredients_str,sep="\n") -->
<!-- } -->
<!-- ``` -->
<!-- <!-- NOT DONE --> -->
<!-- ```{r} -->
<!-- actionButton("search", label = "Search") -->
<!-- ``` -->
<!-- ```{r,echo=FALSE} -->
<!-- eventReactive(input$search,renderText(input$url)) -->
<!-- ``` -->
library(rvest)
library(shiny)
library(flexdashboard)
create_text<-function(link){
website<-function(link=link){
webpage<-read_html(link)
recipefor_html<-html_nodes(webpage,'.heading-content')    #change if using different website
recipefor<-html_text(recipefor_html)
recipefor<<-recipefor[4]                                   #change if using different website
#Fetch directions
directions_html<-html_nodes(webpage,".instructions-section")
directions_unparsed<-html_text(directions_html)
directions<<-parse_block(directions_unparsed,"Step")
#Fetch ingredients
ingredients_html<-html_nodes(webpage,".ingredients-item-name")
ingredients<<-trimws(html_text(ingredients_html))
}
#Helper Function
parse_block<-function(str_block,separation){
block<-trimws(str_block)
chunks<-unlist(strsplit(block,separation))
pieces<-character()
for(chunk in chunks){
unprocessed_spaces<-unlist(strsplit(chunk,"\n"))
for(proc in unprocessed_spaces){
line<-trimws(proc)
if(nchar(line)>2 && line!="Advertisement"){        #note 2 is chosen arbitrarily to avoid stand-alone numbers
pieces<-c(pieces,line)
}
}
}
pieces
}
website(input$url)
# Recipe Title
header<-sprintf("### %s\n\n",recipefor)
# Instructions
instructions<-"### Directions\n"
instructions<-paste(instructions,paste(sprintf("%d. %s", 1:length(directions), directions),collapse="\n"),sep="<br>\n<br>")
# Ingredients
ingredients_str<-"### Ingredients\n"
ingredients_str<-paste(ingredients_str,paste(sprintf("- [ ] %s\n", ingredients),collapse="\n"))
#################writeLines(sprintf("- [ ] %s\n", 1:length(ingredients), ingredients))
paste(header,instructions,ingredients_str,sep="\n")
}
ui<-fluidPage(
titlePanel("AllRecipes Recipe Scraper"),
textInput("url","Enter URL: "),
actionButton("search", label = "Search"),
textOutput("recipe")
)
server<-function(input,output){
output$recipe<-eventReactive(input$search,{
renderText(create_text(input$url))
})
}
shinyApp(ui = ui, server = server)
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::build_site()
update.packages(ask = FALSE, checkBuilt = TRUE)
blogdown::stop_server()
update.packages(ask = FALSE, checkBuilt = TRUE)
update.packages(ask = FALSE, checkBuilt = TRUE)
blogdown::build_site()
blogdown::build_site()
library(rlang)
blogdown::build_site()
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(rlang)
remove.packages("rlang", lib="~/R/win-library/4.0")
install.packages("rlang")
install.packages("rlang")
blogdown::build_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::stop_server()
blogdown::serve_site()
create_text('https://www.allrecipes.com/recipe/229780/baked-denver-omelet/?internalSource=popular&referringContentType=Homepage&clickId=cardslot%202')
---
title: Recipe Scraping
author: ''
date: ''
slug: recipe-scraping
categories:
- R
tags:
- Data Wrangling
output: flexdashboard::flex_dashboard
runtime: shiny
draft: TRUE
---
### Preface
This is a scrapping tool made to obtain recipes easily from AllRecipes.com.
<!-- FUTURE PLANS: Give option for advanced settings (so other sites can be used), and give option to generate PDF -->
---
```{r setup,include=FALSE}
library(rvest)
library(shiny)
library(flexdashboard)
```
```{r, echo=FALSE}
create_text<-function(input_url){
website<-function(link=input_url){
webpage<-read_html(link)
recipefor_html<-html_nodes(webpage,'.heading-content')    #change if using different website
recipefor<-html_text(recipefor_html)
recipefor<<-recipefor[4]                                   #change if using different website
#Fetch directions
directions_html<-html_nodes(webpage,".instructions-section")
directions_unparsed<-html_text(directions_html)
directions<<-parse_block(directions_unparsed,"Step")
#Fetch ingredients
ingredients_html<-html_nodes(webpage,".ingredients-item-name")
ingredients<<-trimws(html_text(ingredients_html))
}
#Helper Function
parse_block<-function(str_block,separation){
block<-trimws(str_block)
chunks<-unlist(strsplit(block,separation))
pieces<-character()
for(chunk in chunks){
unprocessed_spaces<-unlist(strsplit(chunk,"\n"))
for(proc in unprocessed_spaces){
line<-trimws(proc)
if(nchar(line)>2 && line!="Advertisement"){        #note 2 is chosen arbitrarily to avoid stand-alone numbers
pieces<-c(pieces,line)
}
}
}
pieces
}
website(input$url)
# Recipe Title
header<-sprintf("### %s\n\n",recipefor)
# Instructions
instructions<-"### Directions\n"
instructions<-paste(instructions,paste(sprintf("%d. %s", 1:length(directions), directions),collapse="\n"),sep="<br>\n<br>")
# Ingredients
ingredients_str<-"### Ingredients\n"
ingredients_str<-paste(ingredients_str,paste(sprintf("- [ ] %s\n", ingredients),collapse="\n"))
#################writeLines(sprintf("- [ ] %s\n", 1:length(ingredients), ingredients))
return(paste(header,instructions,ingredients_str,sep="\n"))
}
```
Column {.sidebar data-width=300}
-------------------------------------
```{r, echo=FALSE}
textInput("url","Enter URL: ")
actionButton("search", label = "Search")
```
Row
-------------------------------------
```{r,echo=FALSE}
renderText({create_text(input$url)})
```
create_text('https://www.allrecipes.com/recipe/229780/baked-denver-omelet/?internalSource=popular&referringContentType=Homepage&clickId=cardslot%202')
create_text('https://www.allrecipes.com/recipe/229780/baked-denver-omelet/?internalSource=popular&referringContentType=Homepage&clickId=cardslot%202')
create_text('https://www.allrecipes.com/recipe/229780/baked-denver-omelet/?internalSource=popular&referringContentType=Homepage&clickId=cardslot%202')
```{r, echo=FALSE}
create_text<-function(input_url){
website<-function(link=input_url){
webpage<-read_html(link)
recipefor_html<-html_nodes(webpage,'.heading-content')    #change if using different website
recipefor<-html_text(recipefor_html)
recipefor<<-recipefor[4]                                   #change if using different website
#Fetch directions
directions_html<-html_nodes(webpage,".instructions-section")
directions_unparsed<-html_text(directions_html)
directions<<-parse_block(directions_unparsed,"Step")
#Fetch ingredients
ingredients_html<-html_nodes(webpage,".ingredients-item-name")
ingredients<<-trimws(html_text(ingredients_html))
}
#Helper Function
parse_block<-function(str_block,separation){
block<-trimws(str_block)
chunks<-unlist(strsplit(block,separation))
pieces<-character()
for(chunk in chunks){
unprocessed_spaces<-unlist(strsplit(chunk,"\n"))
for(proc in unprocessed_spaces){
line<-trimws(proc)
if(nchar(line)>2 && line!="Advertisement"){        #note 2 is chosen arbitrarily to avoid stand-alone numbers
pieces<-c(pieces,line)
}
}
}
pieces
}
website(input_url)
# Recipe Title
header<-sprintf("### %s\n\n",recipefor)
# Instructions
instructions<-"### Directions\n"
instructions<-paste(instructions,paste(sprintf("%d. %s", 1:length(directions), directions),collapse="\n"),sep="<br>\n<br>")
# Ingredients
ingredients_str<-"### Ingredients\n"
ingredients_str<-paste(ingredients_str,paste(sprintf("- [ ] %s\n", ingredients),collapse="\n"))
#################writeLines(sprintf("- [ ] %s\n", 1:length(ingredients), ingredients))
return(paste(header,instructions,ingredients_str,sep="\n"))
}
```
create_text('https://www.allrecipes.com/recipe/229780/baked-denver-omelet/?internalSource=popular&referringContentType=Homepage&clickId=cardslot%202')
renderText(create_text('https://www.allrecipes.com/recipe/229780/baked-denver-omelet/?internalSource=popular&referringContentType=Homepage&clickId=cardslot%202'))
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::build_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_dir()
blogdown::build_dir("static")
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
nchar
blogdown::stop_server()
blogdown::build_site()
build_dir(force = TRUE)
blogdown::build_dir(force = TRUE)
blogdown::build_site()
print("Hello")
